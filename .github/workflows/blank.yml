# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Cache the downloaded slob file
      - name: Cache slob file
        id: cache-slob
        uses: actions/cache@v4
        with:
          path: zhwiki-20250201.slob
          key: ${{ runner.os }}-slob-20250201
          restore-keys: |
            ${{ runner.os }}-slob-

      # Only download if not cached
      - name: wget
        if: steps.cache-slob.outputs.cache-hit != 'true'
        run: wget -c https://ftp.halifax.rwth-aachen.de/aarddict/zhwiki/zhwiki20250201-slob/zhwiki-20250201.slob

      # Upload slob file as artifact for other jobs to use
      - name: Upload slob file
        uses: actions/upload-artifact@v4
        with:
          name: slob-file
          path: zhwiki-20250201.slob
          retention-days: 1

  generate:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [ifo, xml, tab]
    steps:
      - uses: actions/checkout@v4

      # Download the slob file
      - name: Download slob file
        uses: actions/download-artifact@v4
        with:
          name: slob-file

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      # Cache Python virtual environment
      - name: Cache Python virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}-${{ matrix.format }}
          restore-keys: |
            ${{ runner.os }}-venv-

      # Install system dependencies and Python packages if cache miss
      - name: install
        run: |
          if [ ! -d ".venv" ]; then
            uv venv
          fi
          source .venv/bin/activate
          if ! dpkg -l | grep -q "libicu-dev"; then
            sudo apt-get update
            sudo apt-get install -y pkg-config libicu-dev
          fi
          uv pip install pyglossary PyICU lxml prompt_toolkit
          mkdir -p output

      - name: run ${{ matrix.format }}
        run: |
          source .venv/bin/activate
          uv run pyglossary --no-interactive zhwiki-20250201.slob output/zhwiki-20250201.${{ matrix.format }}

      - name: Upload ${{ matrix.format }} output
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.format }}
          path: output/zhwiki-20250201.${{ matrix.format }}
          retention-days: 90
