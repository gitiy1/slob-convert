# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      versioncode:
        description: 'Version Code'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Convert:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.12"  # 明确指定 Python 版本
      
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      # 系统依赖缓存标记
      - name: Cache system dependencies
        id: cache-system-deps
        uses: actions/cache@v4
        with:
          path: .system-deps-installed
          key: ${{ runner.os }}-system-deps-v2-${{ env.PYTHON_VERSION }}

      # 安装系统依赖（如果未缓存）
      - name: Install system dependencies
        if: steps.cache-system-deps.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libicu-dev dictzip
          touch .system-deps-installed

      # 创建和解析依赖文件
      - name: Create and resolve dependencies
        run: |
          # 创建依赖文件
          cat > requirements.in << EOL
          pyglossary
          PyICU
          lxml
          prompt_toolkit
          EOL

          # 使用 uv pip compile 生成精确的依赖版本
          uv pip compile requirements.in --output-file requirements.lock
          cat requirements.lock

      # 改进的 Python 虚拟环境缓存
      - name: Cache Python virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          # 使用锁定文件的哈希值作为缓存键
          key: ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-venv-

      # Install Python packages if cache miss
      - name: Setup Python Environment
        run: |
          if [ ! -d ".venv" ]; then
            echo "Creating new virtual environment..."
            uv venv
          fi
          source .venv/bin/activate
          
          # 使用锁定文件安装依赖
          echo "Installing Python packages from lock file..."
          uv pip install -r requirements.lock
          
          # 验证安装的包
          uv pip freeze > installed.txt
          if ! cmp -s requirements.lock installed.txt; then
            echo "Warning: Installed packages differ from lock file"
            diff requirements.lock installed.txt || true
          fi
          
          mkdir -p output

      # Cache the downloaded slob file with validation
      - name: Cache slob file
        id: cache-slob
        uses: actions/cache@v4
        with:
          path: |
            zhwiki-${{ github.event.inputs.versioncode }}.slob
            .slob-checksum
          key: slob-file-${{ github.event.inputs.versioncode }}-v2
          restore-keys: |
            slob-file-${{ github.event.inputs.versioncode }}-

      # Verify cached SLOB file
      - name: Verify SLOB file
        if: steps.cache-slob.outputs.cache-hit == 'true'
        run: |
          if [ ! -s "zhwiki-${{ github.event.inputs.versioncode }}.slob" ]; then
            echo "Cached SLOB file is empty or corrupted"
            rm -f "zhwiki-${{ github.event.inputs.versioncode }}.slob"
            echo "::set-output name=cache-hit::false"
          fi

      # Only download if not cached or verification failed
      - name: Download SLOB file
        if: steps.cache-slob.outputs.cache-hit != 'true'
        run: |
          wget -c https://ftp.halifax.rwth-aachen.de/aarddict/zhwiki/zhwiki${{ github.event.inputs.versioncode }}-slob/zhwiki-20250201.slob -O zhwiki-${{ github.event.inputs.versioncode }}.slob
          # Create checksum file
          sha256sum zhwiki-${{ github.event.inputs.versioncode }}.slob > .slob-checksum

      - name: Convert IFO
        run: |
          source .venv/bin/activate
          uv run pyglossary --no-interactive zhwiki-${{ github.event.inputs.versioncode }}.slob output/zhwiki-${{ github.event.inputs.versioncode }}.ifo --large_file=true

      - name: Upload IFO output
        uses: actions/upload-artifact@v4
        with:
          name: wiki-ifo-${{ github.event.inputs.versioncode }}
          path: |
            output/zhwiki-${{ github.event.inputs.versioncode }}.ifo
            requirements.lock
          retention-days: 90

      # Add workflow completion notification
      - name: Notify completion
        if: always()
        run: |
          echo "Workflow completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Status: ${{ job.status }}"
